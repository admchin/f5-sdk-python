image: python:3.7

stages:
    - test
    - test_functional_init
    - test_functional_execute
    - test_functional_cleanup
    - docs
    - publish
    - publish_test

variables:
    TERRAFORM_PKG_URL: 'https://releases.hashicorp.com/terraform/0.12.6/terraform_0.12.6_linux_386.zip'
    ARTIFACTORY_SERVER: "$ARTIFACTORY_SERVER"
    # azure vars - normalize env var options between ansible and terraform
    AZURE_TENANT: "$AZURE_TENANT_ID"
    AZURE_SECRET: "$AZURE_CLIENT_SECRET"
    ARM_CLIENT_ID: "$AZURE_CLIENT_ID"
    ARM_CLIENT_SECRET: "$AZURE_CLIENT_SECRET"
    ARM_SUBSCRIPTION_ID: "$AZURE_SUBSCRIPTION_ID"
    ARM_TENANT_ID: "$AZURE_TENANT_ID"
    # aws vars
    AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
    AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"
    AWS_DEFAULT_REGION: "$AWS_DEFAULT_REGION"
    # gcp vars
    GOOGLE_CREDENTIALS: "$GOOGLE_CREDENTIALS"
    GOOGLE_PROJECT_ID: "$GOOGLE_PROJECT_ID"
    # debug vars
    F5_SDK_LOG_LEVEL: "INFO"
    PYTHONWARNINGS: 'ignore:Unverified HTTPS request'

# unit tests: python 3.x (preferred)
test_unit:
    stage: test
    script:
        # install packages
        - pip install -r requirements.txt
        - pip install .
        # run unit tests
        - make unit_test
        # run linter
        - make lint
    tags:
        - cm-official-docker-executor

# unit tests: python 2.x
test_unit_python_2_x:
    image: python:2.7
    stage: test
    script:
        # install packages
        - pip install -r requirements.txt
        - pip install .
        # run unit tests
        - make unit_test
    tags:
        - cm-official-docker-executor

# depndency security check
test_security_check:
    stage: test
    script:
        # install packages
        - pip install -r requirements.txt
        - pip install .
        # run dependency check
        - safety check -r requirements.txt
    tags:
        - cm-official-docker-executor

test_functional_init:
    stage: test_functional_init
    retry:
        max: 1
    script:
        # install jq
        - apt-get update
        - apt-get install -y jq
        # install terraform
        - curl ${TERRAFORM_PKG_URL} -o terraform.zip -vvv && unzip terraform.zip && export PATH="$PATH:$(pwd)"
        # deploy aws enviroment
        - bash ./tests/deployment/deploy.sh aws create
    tags:
        - cm-official-docker-executor

# run functional tests: aws
test_functional_execute:
    stage: test_functional_execute
    retry:
        max: 1
    script:
        # install packages
        - pip install -r requirements.txt
        - pip install .
        # run function tests
        - make functional_test
        # run linter
        - make lint
    tags:
        - cm-official-docker-executor

test_functional_cleanup:
    stage: test_functional_cleanup
    retry:
        max: 1
    script:
        # deploy aws enviroment
        - bash ./tests/deployment/deploy.sh aws delete    
    tags:
        - cm-official-docker-executor

# generate code coverage docs
docs_code_coverage:
    stage: docs
    script:
        # install packages
        - pip install -r requirements.txt
        - pip install .
        # generate coverage
        - make coverage
    tags:
        - cm-official-docker-executor
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_code_coverage
        paths:
            - code_coverage
        expire_in: 1 month

# generate code docs
docs_code:
    stage: docs
    script:
        # install packages
        - pip install -r requirements.txt
        - pip install .
        # install apt packages: doxygen
        - apt-get update
        - apt-get install -y doxygen
        # generate docs
        - make code_docs
    tags:
        - cm-official-docker-executor
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_code_docs
        paths:
            - code_docs
        expire_in: 1 month

# Publish to internal artifactory
# Note: Will build and push eggs when new tags are pushed with the assumption being the package
# version has been updated. However even if it hasn't it will simply update the existing version
publish_egg_to_artifactory:
    stage: publish
    # for now publish on develop and master as well (instead of just tags)
    only:
        - tags
        - master
        - develop
    tags:
        - docker-executor
    script:
        - make build
        - EGG_FILE=$(ls dist/*.gz)
        - EGG_NAME=$(basename $EGG_FILE)
        - URL=${ARTIFACTORY_BASE_URL}/f5-cloud-solutions-pypi/f5-cloud-sdk/${EGG_NAME}
        - echo ${URL}
        - >-
          UPLOAD_RESULT=$(curl -H "Authorization: Bearer ${ARTIFACTORY_TOKEN}" -X PUT --data-binary @${EGG_FILE} ${URL})
        - if [[ $? -eq 0 ]] && [[ "$UPLOAD_RESULT" == *created* ]]; then echo "Upload complete"; else echo "Upload failed"; exit 1; fi
        - echo $UPLOAD_RESULT

# publish docs to internal pages: - this job MUST be named 'pages'
pages:
    stage: publish
    environment:
        name: staging
        url: https://${CI_PROJECT_NAMESPACE}.${PAGES_DOMAIN}/${CI_PROJECT_NAME}
    tags:
        - cm-official-docker-executor
    script:
        - PUBLIC_DIR='./public'
        - mkdir -p ${PUBLIC_DIR}
        # place index.html in public dir
        - cp docs/index.html ${PUBLIC_DIR}/index.html
        # place code coverage artifacts under /coverage
        - mkdir -p ${PUBLIC_DIR}/coverage
        - cp -R code_coverage/* ${PUBLIC_DIR}/coverage
        # place code docs artifacts under /code-docs
        - mkdir -p ${PUBLIC_DIR}/code-docs
        - cp -R code_docs/html/* ./public/code-docs
        # etc...
    artifacts:
        paths:
            - public
    only:
        - develop

# publish test: test internal (artifactory) install
publish_test_internal_install:
    stage: publish_test
    script:
        # install packages - first wait until it is available after a recent publish
        - bash scripts/wait_for_resp.sh ${ARTIFACTORY_BASE_URL}/api/pypi/f5-cloud-solutions-pypi/simple/f5-cloud-sdk/
        - pip install f5-cloud-sdk --extra-index-url ${ARTIFACTORY_BASE_URL}/api/pypi/f5-cloud-solutions-pypi/simple
    tags:
        - cm-official-docker-executor